[{"content":"Well-thought-through product announcements will help increase feature awareness and engage users with new functionality. Just like sharing your public roadmap, it\u0026rsquo;s also a great way to let potential customers see that you\u0026rsquo;re constantly improving.\nFurther reading Read How to announce product updates and features ","date":"2023-09-07","id":0,"permalink":"/blog/example/","summary":"You can use blog posts for announcing product updates and features.","tags":[],"title":"Example "},{"content":"","date":"2023-09-07","id":1,"permalink":"/blog/","summary":"","tags":[],"title":"Blog"},{"content":"","date":"2023-09-07","id":2,"permalink":"/docs/guides/","summary":"","tags":[],"title":"Java"},{"content":"‚úÖ What is Java? Java is a high-level, object-oriented programming language developed by Sun Microsystems in the early 1990s. It is known for its simplicity, portability, security, and robustness.\nJava is used to build:\nDesktop applications üñ•Ô∏è Web applications üåê Mobile apps üì± Enterprise systems üíº Embedded systems ü§ñ Java follows the WORA principle ‚Äî Write Once, Run Anywhere ‚Äî meaning the same Java code can run on any device that has a Java Virtual Machine (JVM).\nüìú History of Java In the early 1990s, a group of engineers at Sun Microsystems, led by James Gosling, started a project called the Green Project. Their mission was to create a platform-independent language for digital devices like cable boxes.\nThey first named the language Oak, after the tree outside Gosling‚Äôs window. But due to a trademark issue, it was later renamed to Java, inspired by the coffee they loved ‚òï.\nJava was officially released in 1995, introducing a new way of building secure, robust, cross-platform applications.\nSun Microsystems was acquired by Oracle Corporation in 2010, and Oracle has maintained Java since then.\nüí° Features of Java Feature Description Simple Easy to learn, similar syntax to C++ but without complexity Object-Oriented Everything is treated as objects and classes Platform Independent Java code runs on any system with a JVM Secure Bytecode verification and no direct memory access Robust Strong memory management and exception handling Multithreaded Supports concurrent execution of threads Portable Bytecode can be run on any device with a JVM High Performance Uses JIT (Just-In-Time) compiler for fast execution Distributed Supports remote method invocation (RMI), enterprise systems Dynamic Loads classes dynamically during execution üåç Why Java is Platform Independent? Java source code is compiled into bytecode, which is not platform-specific. This bytecode is executed by the Java Virtual Machine (JVM), which exists for many platforms (Windows, Mac, Linux, etc.).\nüß† So, the same .class file can run anywhere, as long as a JVM is installed.\nThis gives rise to the phrase: \u0026ldquo;Write Once, Run Anywhere (WORA)\u0026rdquo;\nüß± Java Editions Java comes in different editions tailored for specific use cases:\nEdition Purpose Java SE Standard Edition ‚Äî Core libraries, OOP, collections, etc. Java EE Enterprise Edition ‚Äî Web apps, servlets, JSP, EJB Java ME Micro Edition ‚Äî Embedded devices, mobile platforms Java FX Modern UI for desktop applications ","date":"2023-09-07","id":3,"permalink":"/docs/guides/0.-introduction-to-java/","summary":"\u003ch2 id=\"-what-is-java\"\u003e‚úÖ What is Java?\u003c/h2\u003e\n\u003cp\u003eJava is a \u003cstrong\u003ehigh-level, object-oriented programming language\u003c/strong\u003e developed by \u003cstrong\u003eSun Microsystems\u003c/strong\u003e in the early 1990s.\nIt is known for its \u003cstrong\u003esimplicity, portability, security\u003c/strong\u003e, and \u003cstrong\u003erobustness\u003c/strong\u003e.\u003c/p\u003e","tags":[],"title":" 0üî∞. Introduction to Java"},{"content":"if-else The if-else statement is used to make decisions based on a condition. If the condition is true, the first block of code is executed; otherwise, the else block is executed.\nExample:\npublic class IfElseExample { public static void main(String[] args) { int num = 10; if (num \u0026gt; 5) { System.out.println(\u0026#34;Number is greater than 5\u0026#34;); } else { System.out.println(\u0026#34;Number is less than or equal to 5\u0026#34;); } } }\rswitch-case The switch statement executes one out of many possible blocks of code based on the value of a variable or expression.\nExample:\npublic class SwitchCaseExample { public static void main(String[] args) { int day = 3; switch (day) { case 1: System.out.println(\u0026#34;Monday\u0026#34;); break; case 2: System.out.println(\u0026#34;Tuesday\u0026#34;); break; case 3: System.out.println(\u0026#34;Wednesday\u0026#34;); break; case 4: System.out.println(\u0026#34;Thursday\u0026#34;); break; default: System.out.println(\u0026#34;Invalid Day\u0026#34;); } } }\rloops (for, while, do-while) Loops are used to execute a block of code multiple times. Java has three types of loops: for, while, and do-while.\nfor loop example:\npublic class ForLoopExample { public static void main(String[] args) { for (int i = 1; i \u0026lt;= 5; i++) { System.out.println(\u0026#34;Iteration: \u0026#34; + i); } } }\rwhile loop example:\npublic class WhileLoopExample { public static void main(String[] args) { int i = 1; while (i \u0026lt;= 5) { System.out.println(\u0026#34;Iteration: \u0026#34; + i); i++; } } }\rdo-while loop example:\npublic class DoWhileLoopExample { public static void main(String[] args) { int i = 1; do { System.out.println(\u0026#34;Iteration: \u0026#34; + i); i++; } while (i \u0026lt;= 5); } }\rbreak and continue break: Exits from the loop or switch statement. continue: Skips the current iteration of the loop and moves to the next iteration. Example:\npublic class BreakContinueExample { public static void main(String[] args) { for (int i = 1; i \u0026lt;= 5; i++) { if (i == 3) { continue; // Skips iteration when i is 3 } if (i == 4) { break; // Exits the loop when i is 4 } System.out.println(\u0026#34;Iteration: \u0026#34; + i); } } }\rnested loops A nested loop is a loop inside another loop. It is used when you need to perform operations that require multiple iterations within each iteration.\nExample:\npublic class NestedLoopsExample { public static void main(String[] args) { for (int i = 1; i \u0026lt;= 3; i++) { for (int j = 1; j \u0026lt;= 2; j++) { System.out.println(\u0026#34;i: \u0026#34; + i + \u0026#34;, j: \u0026#34; + j); } } } }\rThis Markdown file provides an overview of Control Flow Statements in Java, with code examples for each subtopic.\n","date":"2023-09-07","id":4,"permalink":"/docs/guides/1.3-.-control-flow-statements/","summary":"\u003ch3 id=\"if-else\"\u003eif-else\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003eif-else\u003c/code\u003e statement is used to make decisions based on a condition. If the condition is \u003ccode\u003etrue\u003c/code\u003e, the first block of code is executed; otherwise, the \u003ccode\u003eelse\u003c/code\u003e block is executed.\u003c/p\u003e","tags":[],"title":" 1.3 üì¶. Control Flow Statements"},{"content":"Method Syntax In Java, methods are blocks of code that perform a specific task. A method must be defined with a return type, method name, and optional parameters.\nExample: public class MethodSyntaxExample { public static void main(String[] args) { sayHello(); // Calling the method } // Method definition public static void sayHello() { System.out.println(\u0026#34;Hello, World!\u0026#34;); } }\rMethod Overloading Method overloading occurs when multiple methods have the same name but differ in the number or type of parameters.\nExample: public class MethodOverloadingExample { public static void main(String[] args) { System.out.println(add(5, 10)); // Calls method with two integers System.out.println(add(5.5, 10.5)); // Calls method with two double values } // Overloaded methods public static int add(int a, int b) { return a + b; } public static double add(double a, double b) { return a + b; } }\rConstructor and Its Types A constructor is a special method used to initialize objects. There are two types of constructors:\nDefault Constructor: A constructor with no parameters. Parameterized Constructor: A constructor that accepts parameters to initialize object properties. Example: public class ConstructorExample { String name; // Default constructor public ConstructorExample() { name = \u0026#34;Default Name\u0026#34;; } // Parameterized constructor public ConstructorExample(String name) { this.name = name; } public static void main(String[] args) { ConstructorExample obj1 = new ConstructorExample(); ConstructorExample obj2 = new ConstructorExample(\u0026#34;John\u0026#34;); System.out.println(\u0026#34;Name: \u0026#34; + obj1.name); // Default Name System.out.println(\u0026#34;Name: \u0026#34; + obj2.name); // John } }\rConstructor Overloading Constructor overloading occurs when multiple constructors are defined within the same class, each having a different parameter list.\nExample: public class ConstructorOverloadingExample { String name; int age; // Constructor with one parameter public ConstructorOverloadingExample(String name) { this.name = name; } // Constructor with two parameters public ConstructorOverloadingExample(String name, int age) { this.name = name; this.age = age; } public static void main(String[] args) { ConstructorOverloadingExample obj1 = new ConstructorOverloadingExample(\u0026#34;Alice\u0026#34;); ConstructorOverloadingExample obj2 = new ConstructorOverloadingExample(\u0026#34;Bob\u0026#34;, 25); System.out.println(obj1.name + \u0026#34; | \u0026#34; + obj2.age); } }\rthis Keyword The this keyword refers to the current object within an instance method or constructor. It can also be used to differentiate between instance variables and method parameters with the same name.\nExample: public class ThisKeywordExample { int age; // Constructor using \u0026#39;this\u0026#39; keyword public ThisKeywordExample(int age) { this.age = age; // Refers to the instance variable } public static void main(String[] args) { ThisKeywordExample obj = new ThisKeywordExample(30); System.out.println(\u0026#34;Age: \u0026#34; + obj.age); } }\rstatic Keyword The static keyword is used to indicate that a particular field or method belongs to the class itself, rather than to instances of the class. It can be used with variables, methods, blocks, and nested classes.\nExample: public class StaticKeywordExample { static int count = 0; // Static method to increment count public static void incrementCount() { count++; } public static void main(String[] args) { System.out.println(\u0026#34;Count: \u0026#34; + count); // Initially 0 incrementCount(); // Call static method System.out.println(\u0026#34;Count after increment: \u0026#34; + count); // Now 1 } }\r","date":"2023-09-07","id":5,"permalink":"/docs/guides/1.4-.-methods-and-constructors/","summary":"\u003ch2 id=\"method-syntax\"\u003eMethod Syntax\u003c/h2\u003e\n\u003cp\u003eIn Java, methods are blocks of code that perform a specific task. A method must be defined with a return type, method name, and optional parameters.\u003c/p\u003e","tags":[],"title":" 1.4 üîß. Methods and Constructors"},{"content":"What is Java? History of Java Features of Java Why Java is Platform Independent Java Editions (SE, EE, ME) ‚òï The Birth of Java: A Real Tale of Code and Coffee In the early 1990s, at Sun Microsystems, a group of brilliant engineers were quietly working on something visionary. This secret initiative, called the \u0026ldquo;Green Project\u0026rdquo;, had one big dream:\nCreate a language that could run on anything ‚Äî TVs, toasters, computers ‚Äî you name it.\nAt the heart of this mission was a genius named James Gosling, often called the ‚Äúfather of Java.‚Äù He and his team wanted a language that was simple, secure, and platform-independent ‚Äî so developers wouldn‚Äôt have to write different versions of software for every device.\nOriginally, they called this new language ‚ÄúOak,‚Äù inspired by a mighty oak tree right outside Gosling‚Äôs window. But when they tried to release it publicly, they hit a roadblock ‚Äî the name \u0026ldquo;Oak\u0026rdquo; was already taken by another company. So, they went back to the drawing board.\nSitting at a coffee shop, brainstorming, the team settled on the name \u0026ldquo;Java\u0026rdquo;, after the strong, exotic Java coffee from Indonesia they were sipping on. It was catchy, unique, and had the energy they wanted to bring to the tech world.\nüåç In 1995, Java 1.0 Was Born They released Java to the public, with the bold slogan:\n‚ÄúWrite Once, Run Anywhere.‚Äù\nThat meant a Java program written on one machine could run on any device that had the Java Virtual Machine (JVM). This was revolutionary! No more rewriting code for different operating systems. üöÄ The Rise to Fame Soon, Java started powering:\nWeb browsers (like Netscape)\nEmbedded systems\nDesktop apps\nAndroid mobile apps\nHuge enterprise servers\nIn 2006, Sun Microsystems made a legendary move ‚Äî they open-sourced Java, releasing the OpenJDK, so the whole world could build on it.\nBut things changed in 2010, when Oracle Corporation bought Sun Microsystems. Now, Oracle controls Java‚Äôs development ‚Äî and even though there have been some controversies, Java remains one of the most powerful and widely-used languages in the world.\nFurther reading class Test { public static void main(String[] args) { System.out.println(\u0026#34;It works!\u0026#34;); } }\rRead about how-to guides in the Di√°taxis framework ","date":"2023-09-07","id":6,"permalink":"/docs/guides/1.9-.-command-line-arguments/","summary":"\u003ch3 id=\"what-is-java\"\u003eWhat is Java?\u003c/h3\u003e\n\u003ch3 id=\"history-of-java\"\u003eHistory of Java\u003c/h3\u003e\n\u003ch3 id=\"features-of-java\"\u003eFeatures of Java\u003c/h3\u003e\n\u003ch3 id=\"why-java-is-platform-independent\"\u003eWhy Java is Platform Independent\u003c/h3\u003e\n\u003ch3 id=\"java-editions-se-ee-me\"\u003eJava Editions (SE, EE, ME)\u003c/h3\u003e\n\u003ch3 id=\"-the-birth-of-java\"\u003e‚òï The Birth of Java:\u003c/h3\u003e\n\u003cp\u003eA Real Tale of Code and Coffee\nIn the early 1990s, at Sun Microsystems, a group of brilliant engineers were quietly working on something visionary. This secret initiative, called the \u0026ldquo;Green Project\u0026rdquo;, had one big dream:\u003c/p\u003e","tags":[],"title":" 1.9  üíª . Command Line Arguments"},{"content":"Java provides rich APIs for file input and output (I/O) using streams. These streams handle both binary (byte-based) and character (text-based) data.\nüîπ Byte Stream Byte streams are used to perform input and output of 8-bit bytes. These are mainly used to handle binary data like images, audio, video, etc.\nExample:\nimport java.io.FileInputStream; import java.io.FileOutputStream; public class ByteStreamExample { public static void main(String[] args) { try { FileInputStream in = new FileInputStream(\u0026#34;input.txt\u0026#34;); FileOutputStream out = new FileOutputStream(\u0026#34;output.txt\u0026#34;); int i; while ((i = in.read()) != -1) { out.write(i); } in.close(); out.close(); } catch (Exception e) { System.out.println(e); } } }\rüîπ FileInputStream \u0026amp; FileOutputStream\nFileInputStream: Reads data from a file byte by byte.\nFileOutputStream: Writes byte data to a file.\nAlready shown in Byte Stream example. ##üî∏ Character Stream\nCharacter streams use 16-bit Unicode and are used for handling text files.\nExample:\nimport java.io.FileReader; import java.io.FileWriter; public class CharStreamExample { public static void main(String[] args) { try { FileReader fr = new FileReader(\u0026#34;input.txt\u0026#34;); FileWriter fw = new FileWriter(\u0026#34;output.txt\u0026#34;); int i; while ((i = fr.read()) != -1) { fw.write(i); } fr.close(); fw.close(); } catch (Exception e) { System.out.println(e); } } }\rüî∏ FileReader \u0026amp; FileWriter\nFileReader: Reads character data from files.\nFileWriter: Writes character data to files.\nAlready shown above. ##üí® Buffered Streams\nBuffered classes increase efficiency by reducing I/O operations.\nBufferedInputStream\nBufferedOutputStream\nBufferedReader\nBufferedWriter\nExample:\nimport java.io.*; public class BufferedExample { public static void main(String[] args) { try { BufferedReader br = new BufferedReader(new FileReader(\u0026#34;input.txt\u0026#34;)); BufferedWriter bw = new BufferedWriter(new FileWriter(\u0026#34;output.txt\u0026#34;)); String line; while ((line = br.readLine()) != null) { bw.write(line); bw.newLine(); } br.close(); bw.close(); } catch (IOException e) { e.printStackTrace(); } } }\r##üîÑ InputStreamReader \u0026amp; OutputStreamWriter\nThey bridge byte streams and character streams.\nExample:\nimport java.io.*; public class StreamReaderWriterExample { public static void main(String[] args) { try { InputStreamReader isr = new InputStreamReader(new FileInputStream(\u0026#34;input.txt\u0026#34;)); OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(\u0026#34;output.txt\u0026#34;)); int data; while ((data = isr.read()) != -1) { osw.write(data); } isr.close(); osw.close(); } catch (IOException e) { e.printStackTrace(); } } }\rüóÇÔ∏è Stream Hierarchy Overview InputStream OutputStream | | ------------------------ ------------------------ | | | | FileInputStream BufferedInputStream FileOutputStream BufferedOutputStream Reader Writer | | ------------------------ ------------------------ | | | | FileReader BufferedReader FileWriter BufferedWriter\r","date":"2023-09-07","id":7,"permalink":"/docs/guides/9-.-file-handling-streams/","summary":"\u003cp\u003eJava provides rich APIs for file input and output (I/O) using streams. These streams handle both binary (byte-based) and character (text-based) data.\u003c/p\u003e","tags":[],"title":" 9 üìÑ . File Handling \u0026 Streams "},{"content":" Java Program Structure A basic Java program consists of a class, a main method, and statements inside the method. Here is an example:\npublic class HelloWorld { public static void main(String[] args) { System.out.println(\u0026#34;Hello, World!\u0026#34;); } }\rJVM, JDK, JRE JVM: Java Virtual Machine is responsible for running Java bytecode. JDK: Java Development Kit provides tools to develop Java programs. JRE: Java Runtime Environment contains JVM and other libraries for running Java programs. Example:\n// JVM is responsible for executing this bytecode public class Example { public static void main(String[] args) { System.out.println(\u0026#34;JVM executes this program!\u0026#34;); } }\rJava Architecture Java Architecture consists of various components like ClassLoader, JVM, Garbage Collector, etc.\nClassLoader loads classes at runtime. JVM executes bytecode. Garbage Collector automatically deletes unused objects from memory. Example:\n// This Java code is loaded and executed by JVM at runtime. public class JavaArchitectureExample { public static void main(String[] args) { System.out.println(\u0026#34;Understanding Java Architecture\u0026#34;); } }\rKeywords in Java Keywords in Java are reserved words that have a special meaning and cannot be used as identifiers. Some common keywords include public, static, void, class, if, else, etc.\nExample:\npublic class KeywordExample { public static void main(String[] args) { int number = 10; // \u0026#39;int\u0026#39; is a keyword for integer data type if (number \u0026gt; 5) { // \u0026#39;if\u0026#39; is a keyword for conditional statement System.out.println(\u0026#34;Number is greater than 5\u0026#34;); } } }\rData Types and Variables Java provides various primitive data types like int, float, char, boolean, and more. Variables are used to store values of these data types.\nExample:\npublic class DataTypesExample { public static void main(String[] args) { int num = 10; // Integer type float price = 19.99f; // Float type char grade = \u0026#39;A\u0026#39;; // Character type boolean isActive = true; // Boolean type System.out.println(\u0026#34;Num: \u0026#34; + num); System.out.println(\u0026#34;Price: \u0026#34; + price); System.out.println(\u0026#34;Grade: \u0026#34; + grade); System.out.println(\u0026#34;Active: \u0026#34; + isActive); } }\rOperators in Java Java provides several types of operators like arithmetic, relational, logical, and assignment operators.\nExample:\npublic class OperatorsExample { public static void main(String[] args) { int a = 10; int b = 20; // Arithmetic operators int sum = a + b; int diff = a - b; int product = a * b; int quotient = b / a; int remainder = b % a; // Relational operator boolean isGreater = b \u0026gt; a; // Logical operator boolean isTrue = (a \u0026lt; b) \u0026amp;\u0026amp; (b \u0026gt; a); System.out.println(\u0026#34;Sum: \u0026#34; + sum); System.out.println(\u0026#34;Difference: \u0026#34; + diff); System.out.println(\u0026#34;Product: \u0026#34; + product); System.out.println(\u0026#34;Quotient: \u0026#34; + quotient); System.out.println(\u0026#34;Remainder: \u0026#34; + remainder); System.out.println(\u0026#34;Is Greater: \u0026#34; + isGreater); System.out.println(\u0026#34;Logical Operation Result: \u0026#34; + isTrue); } }\rThis Markdown file provides an introduction to Java Basics with code examples for each subtopic.\n","date":"2023-09-07","id":8,"permalink":"/docs/guides/1.2-%EF%B8%8F.-java-basics/","summary":"\u003chr\u003e\n\u003ch3 id=\"java-program-structure\"\u003eJava Program Structure\u003c/h3\u003e\n\u003cp\u003eA basic Java program consists of a class, a \u003ccode\u003emain\u003c/code\u003e method, and statements inside the method. Here is an example:\u003c/p\u003e","tags":[],"title":"1.2 ‚öôÔ∏è. Java Basics"},{"content":"üß± 5. Object-Oriented Programming (OOP) in Java Object-Oriented Programming is a paradigm that organizes software design around data, or objects, rather than functions and logic. Here are the 10 core concepts with examples:\n1. Class and Object A class is a blueprint. An object is an instance of a class.\nclass Car { String color = \u0026#34;Red\u0026#34;; void drive() { System.out.println(\u0026#34;Driving the car...\u0026#34;); } } public class Main { public static void main(String[] args) { Car myCar = new Car(); // Object creation myCar.drive(); // Method call System.out.println(myCar.color); // Accessing property } }\r2. Access Modifiers Control visibility: public, private, protected, and default (no modifier).\nclass Test { public int a = 10; private int b = 20; protected int c = 30; int d = 40; // default }\r3. Inheritance extends keyword allows a class to inherit properties and methods.\nclass Animal { void eat() { System.out.println(\u0026#34;This animal eats food\u0026#34;); } } class Dog extends Animal { void bark() { System.out.println(\u0026#34;The dog barks\u0026#34;); } } public class Main { public static void main(String[] args) { Dog d = new Dog(); d.eat(); // Inherited d.bark(); } }\r4. Method Overriding A subclass provides its own version of a method defined in its superclass.\nclass Animal { void sound() { System.out.println(\u0026#34;Animal makes sound\u0026#34;); } } class Cat extends Animal { @Override void sound() { System.out.println(\u0026#34;Cat meows\u0026#34;); } }\r5. Polymorphism One method behaves differently based on the object type.\nclass Shape { void draw() { System.out.println(\u0026#34;Drawing shape\u0026#34;); } } class Circle extends Shape { void draw() { System.out.println(\u0026#34;Drawing circle\u0026#34;); } } class Square extends Shape { void draw() { System.out.println(\u0026#34;Drawing square\u0026#34;); } } public class Main { public static void main(String[] args) { Shape s1 = new Circle(); Shape s2 = new Square(); s1.draw(); s2.draw(); } }\r6. Abstraction Hide implementation using abstract classes or interfaces.\nabstract class Vehicle { abstract void start(); } class Bike extends Vehicle { void start() { System.out.println(\u0026#34;Bike starts with a kick\u0026#34;); } }\r7. Abstract Class A class that cannot be instantiated and may have abstract methods.\nabstract class Animal { abstract void makeSound(); void sleep() { System.out.println(\u0026#34;Sleeping...\u0026#34;); } }\r8. Interface Used to define a contract that implementing classes must follow.\ninterface Drawable { void draw(); } class Rectangle implements Drawable { public void draw() { System.out.println(\u0026#34;Drawing rectangle\u0026#34;); } }\r9. Encapsulation Wrap fields and methods into a class and restrict access using getters/setters.\nclass Student { private String name; public void setName(String n) { name = n; } public String getName() { return name; } }\r10. Dynamic Method Dispatch Superclass reference is used to call overridden methods at runtime.\nclass Animal { void sound() { System.out.println(\u0026#34;Some sound\u0026#34;); } } class Dog extends Animal { void sound() { System.out.println(\u0026#34;Bark\u0026#34;); } } public class Main { public static void main(String[] args) { Animal a = new Dog(); // Superclass reference a.sound(); // Executes Dog\u0026#39;s sound } }\r","date":"2023-09-07","id":9,"permalink":"/docs/guides/1.5-.-object-oriented-programming/","summary":"\u003ch1 id=\"-5-object-oriented-programming-oop-in-java\"\u003eüß± 5. Object-Oriented Programming (OOP) in Java\u003c/h1\u003e\n\u003cp\u003eObject-Oriented Programming is a paradigm that organizes software design around data, or objects, rather than functions and logic. Here are the 10 core concepts with examples:\u003c/p\u003e","tags":[],"title":"1.5 üß±. Object-Oriented Programming "},{"content":"Exception handling in Java is a mechanism to handle runtime errors, so the normal flow of the application can be maintained. It prevents abrupt termination of the program and provides a way to gracefully recover from errors.\n‚ùì 1. What is an Exception? An Exception is an object that describes an error condition that has occurred in a piece of code. When an exceptional event occurs, Java creates an object and throws it, which can be caught and handled.\nJava provides a rich set of built-in exception classes, but you can also create your own custom exceptions.\nWhy is exception handling important?\nPrevents program crashes Separates error-handling code from regular code Makes code more robust and readable üìö 2. Types of Exceptions Java exceptions are divided into two main categories:\n‚úÖ Checked Exceptions These are exceptions that are checked at compile-time. The compiler ensures that your code handles these exceptions using try-catch blocks or the throws keyword.\nExamples:\nIOException SQLException FileNotFoundException ‚ùå Unchecked Exceptions These are not checked at compile-time. They usually result from programming errors.\nExamples:\nArithmeticException NullPointerException ArrayIndexOutOfBoundsException ‚ö†Ô∏è Errors Errors indicate serious problems that a program should not try to catch (e.g., OutOfMemoryError).\nüîê 3. try-catch-finally Java provides a structured way to handle exceptions using these keywords:\ntry: Defines a block of code in which exceptions can occur. catch: Defines a block of code that handles the exception. finally: Defines a block of code that is always executed whether an exception occurred or not. public class TryCatchExample { public static void main(String[] args) { try { int a = 10 / 0; } catch (ArithmeticException e) { System.out.println(\u0026#34;Caught an ArithmeticException: \u0026#34; + e.getMessage()); } finally { System.out.println(\u0026#34;Finally block executed\u0026#34;); } } }\rüéØ 4. throw and throws throw Used to explicitly throw an exception object.\nthrow new ArithmeticException(\u0026#34;Cannot divide by zero\u0026#34;);\rthrows Used in method declarations to specify the exceptions that a method may throw.\npublic class ThrowThrowsDemo { static void check(int age) throws ArithmeticException { if (age \u0026lt; 18) { throw new ArithmeticException(\u0026#34;Underage\u0026#34;); } else { System.out.println(\u0026#34;Access granted\u0026#34;); } } public static void main(String[] args) { check(15); } }\rExample:\npublic class ThrowThrowsDemo { static void check(int age) throws ArithmeticException { if (age \u0026lt; 18) { throw new ArithmeticException(\u0026#34;Underage\u0026#34;); } else { System.out.println(\u0026#34;Access granted\u0026#34;); } } public static void main(String[] args) { check(15); } }\rüß© 5. Custom Exception You can define your own exception class by extending Exception or RuntimeException.\nclass MyException extends Exception { public MyException(String message) { super(message); } } public class CustomExceptionDemo { static void validate(int age) throws MyException { if (age \u0026lt; 18) throw new MyException(\u0026#34;Not eligible\u0026#34;); else System.out.println(\u0026#34;Eligible\u0026#34;); } public static void main(String[] args) { try { validate(16); } catch (MyException e) { System.out.println(\u0026#34;Caught: \u0026#34; + e.getMessage()); } } }\r##üß± 6. Exception Class Hierarchy\nThrowable ‚îú‚îÄ‚îÄ Exception ‚îÇ ‚îú‚îÄ‚îÄ IOException ‚îÇ ‚îú‚îÄ‚îÄ SQLException ‚îÇ ‚îî‚îÄ‚îÄ ... ‚îú‚îÄ‚îÄ RuntimeException ‚îÇ ‚îú‚îÄ‚îÄ ArithmeticException ‚îÇ ‚îú‚îÄ‚îÄ NullPointerException ‚îÇ ‚îî‚îÄ‚îÄ ... ‚îî‚îÄ‚îÄ Error ‚îú‚îÄ‚îÄ OutOfMemoryError ‚îî‚îÄ‚îÄ StackOverflowError\r‚úî Key Points: All exceptions are subclasses of Throwable.\nException is for conditions a program should catch.\nError is for serious problems that should not be handled.\n","date":"2023-09-07","id":10,"permalink":"/docs/guides/1.6-.-exception-handling/","summary":"\u003cp\u003eException handling in Java is a mechanism to handle \u003cstrong\u003eruntime errors\u003c/strong\u003e, so the normal flow of the application can be maintained. It prevents abrupt termination of the program and provides a way to gracefully recover from errors.\u003c/p\u003e","tags":[],"title":"1.6 üß∞ . Exception Handling"},{"content":"A package in Java is a namespace that organizes a set of related classes and interfaces. Conceptually, it\u0026rsquo;s similar to different folders on your computer. Packages help:\nPrevent class name conflicts Control access with visibility modifiers Make locating and using classes easier üìÅ 1. Built-in vs User-defined Packages ‚úÖ Built-in Packages Java provides a rich set of standard packages in the java.* namespace.\nExamples:\njava.lang ‚Äì Fundamental classes (automatically imported) java.util ‚Äì Data structures like ArrayList, HashMap java.io ‚Äì Input/output functionalities java.sql ‚Äì Database handling import java.util.Scanner; public class BuiltInDemo { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.print(\u0026#34;Enter name: \u0026#34;); String name = sc.nextLine(); System.out.println(\u0026#34;Hello \u0026#34; + name); } } üõ†Ô∏è User-defined Packages You can create your own packages to group related classes. Steps to create: Use package keyword at the top. Save the file inside a folder with the same name as the package. üìÑ MyPackage/Hello.java ```java package MyPackage; public class Hello { public void display() { System.out.println(\u0026#34;Hello from user-defined package!\u0026#34;); } }\rüìÑ Test.java\nimport MyPackage.Hello; public class Test { public static void main(String[] args) { Hello h = new Hello(); h.display(); } }\rüì• 2. Importing Packages To use classes from another package, you use the import keyword:\nimport java.util.*; // Imports all classes from java.util import java.util.Scanner; // Imports only Scanner\rNo import needed for classes in the same package.\nüèóÔ∏è 3. Creating and Using Packages Create a package:\npackage mypack; public class Message { public static void printMessage() { System.out.println(\u0026#34;Package created and accessed!\u0026#34;); } }\rUse it:\nimport mypack.Message; public class UsePackage { public static void main(String[] args) { Message.printMessage(); } }\rüîê 4. Access Levels (public, private, protected) Java uses access modifiers to restrict the scope of classes, variables, methods, and constructors.\nModifier\tClass\tPackage\tSubclass\tWorld public\t‚úî\t‚úî\t‚úî\t‚úî protected\t‚úî\t‚úî\t‚úî\t‚úñ (default)\t‚úî\t‚úî\t‚úñ\t‚úñ private\t‚úî\t‚úñ\t‚úñ\t‚úñ\npackage demo; public class AccessExample { public int pub = 1; protected int prot = 2; int def = 3; private int priv = 4; public void showAccess() { System.out.println(\u0026#34;Public: \u0026#34; + pub); System.out.println(\u0026#34;Protected: \u0026#34; + prot); System.out.println(\u0026#34;Default: \u0026#34; + def); System.out.println(\u0026#34;Private: \u0026#34; + priv); } }\r","date":"2023-09-07","id":11,"permalink":"/docs/guides/1.7-.-packages-in-java/","summary":"\u003cp\u003eA \u003cstrong\u003epackage\u003c/strong\u003e in Java is a namespace that organizes a set of related classes and interfaces. Conceptually, it\u0026rsquo;s similar to different folders on your computer. Packages help:\u003c/p\u003e","tags":[],"title":"1.7 üì¶ . Packages in Java"},{"content":"What is Java? History of Java Features of Java Why Java is Platform Independent Java Editions (SE, EE, ME) ‚òï The Birth of Java: A Real Tale of Code and Coffee In the early 1990s, at Sun Microsystems, a group of brilliant engineers were quietly working on something visionary. This secret initiative, called the \u0026ldquo;Green Project\u0026rdquo;, had one big dream:\nCreate a language that could run on anything ‚Äî TVs, toasters, computers ‚Äî you name it.\nAt the heart of this mission was a genius named James Gosling, often called the ‚Äúfather of Java.‚Äù He and his team wanted a language that was simple, secure, and platform-independent ‚Äî so developers wouldn‚Äôt have to write different versions of software for every device.\nOriginally, they called this new language ‚ÄúOak,‚Äù inspired by a mighty oak tree right outside Gosling‚Äôs window. But when they tried to release it publicly, they hit a roadblock ‚Äî the name \u0026ldquo;Oak\u0026rdquo; was already taken by another company. So, they went back to the drawing board.\nSitting at a coffee shop, brainstorming, the team settled on the name \u0026ldquo;Java\u0026rdquo;, after the strong, exotic Java coffee from Indonesia they were sipping on. It was catchy, unique, and had the energy they wanted to bring to the tech world.\nüåç In 1995, Java 1.0 Was Born They released Java to the public, with the bold slogan:\n‚ÄúWrite Once, Run Anywhere.‚Äù\nThat meant a Java program written on one machine could run on any device that had the Java Virtual Machine (JVM). This was revolutionary! No more rewriting code for different operating systems. üöÄ The Rise to Fame Soon, Java started powering:\nWeb browsers (like Netscape)\nEmbedded systems\nDesktop apps\nAndroid mobile apps\nHuge enterprise servers\nIn 2006, Sun Microsystems made a legendary move ‚Äî they open-sourced Java, releasing the OpenJDK, so the whole world could build on it.\nBut things changed in 2010, when Oracle Corporation bought Sun Microsystems. Now, Oracle controls Java‚Äôs development ‚Äî and even though there have been some controversies, Java remains one of the most powerful and widely-used languages in the world.\nFurther reading class Test { public static void main(String[] args) { System.out.println(\u0026#34;It works!\u0026#34;); } }\rRead about how-to guides in the Di√°taxis framework ","date":"2023-09-07","id":12,"permalink":"/docs/guides/1.8-.-memory-management-garbage-collection/","summary":"\u003ch3 id=\"what-is-java\"\u003eWhat is Java?\u003c/h3\u003e\n\u003ch3 id=\"history-of-java\"\u003eHistory of Java\u003c/h3\u003e\n\u003ch3 id=\"features-of-java\"\u003eFeatures of Java\u003c/h3\u003e\n\u003ch3 id=\"why-java-is-platform-independent\"\u003eWhy Java is Platform Independent\u003c/h3\u003e\n\u003ch3 id=\"java-editions-se-ee-me\"\u003eJava Editions (SE, EE, ME)\u003c/h3\u003e\n\u003ch3 id=\"-the-birth-of-java\"\u003e‚òï The Birth of Java:\u003c/h3\u003e\n\u003cp\u003eA Real Tale of Code and Coffee\nIn the early 1990s, at Sun Microsystems, a group of brilliant engineers were quietly working on something visionary. This secret initiative, called the \u0026ldquo;Green Project\u0026rdquo;, had one big dream:\u003c/p\u003e","tags":[],"title":"1.8 üßπ . Memory Management \u0026 Garbage Collection"},{"content":"","date":"2023-09-07","id":13,"permalink":"/docs/reference/","summary":"","tags":[],"title":"Reference"},{"content":"Reference pages are ideal for outlining how things work in terse and clear terms. Less concerned with telling a story or addressing a specific use case, they should give a comprehensive outline of what your documenting.\nFurther reading Read about reference in the Di√°taxis framework ","date":"2023-09-07","id":14,"permalink":"/docs/reference/example-reference/","summary":"\u003cp\u003eReference pages are ideal for outlining how things work in terse and clear terms. Less concerned with telling a story or addressing a specific use case, they should give a comprehensive outline of what your documenting.\u003c/p\u003e","tags":[],"title":"Example Reference"},{"content":"Link to valuable, relevant resources.\n","date":"2024-02-27","id":15,"permalink":"/docs/resources/","summary":"\u003cp\u003eLink to valuable, relevant resources.\u003c/p\u003e","tags":[],"title":"Resources"},{"content":"","date":"2023-09-07","id":16,"permalink":"/docs/","summary":"","tags":[],"title":"Docs"},{"content":"","date":"2023-09-07","id":17,"permalink":"/privacy/","summary":"","tags":[],"title":"Privacy Policy"},{"content":"","date":"2023-09-07","id":18,"permalink":"/","summary":"","tags":[],"title":"ADITYA 1000"},{"content":"","date":"0001-01-01","id":19,"permalink":"/categories/","summary":"","tags":[],"title":"Categories"},{"content":"","date":"0001-01-01","id":20,"permalink":"/contributors/","summary":"","tags":[],"title":"Contributors"},{"content":"","date":"0001-01-01","id":21,"permalink":"/tags/","summary":"","tags":[],"title":"Tags"}]